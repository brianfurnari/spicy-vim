# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define ${1}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/env ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# StaticFunction
snippet sfun
	//-----------------------------------------------------------------------------
	/**
	 * ${4}
	 *
	 * @param [in,out]
	 * @return
	 */
	//-----------------------------------------------------------------------------
	static ${1:void}
	${2:function_name}(
			${3}
			)
	{
		${4:/* code */}
	}
# Function
snippet fun
	//-----------------------------------------------------------------------------
	${1:void}
	${2:function_name}(
			${3}
			)
	{
		${4:/* code */}
	}
# Function Declaration
	/**
	 * ${4}
	 *
	 * @param [in,out]
	 * @return
	 */
snippet fund
	${1:void}
	${2:function_name}(
			${3}
			);${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned
# Print byte array
snippet printb
	//-----------------------------------------------------------------------------
	/**
	 *  Method to print the specified byte array
	 *
	 *  @param buffer [in] the buffer to print
	 *  @param length [in] the length of the buffer
	 *  @returns ${1}
	 */
	//-----------------------------------------------------------------------------
	static ${1:void}
	debug_print_buffer(
	    const ${2:uint8}* const buffer,
	    ${3:uint16} length
	    )
	{
	#define BYTES_PER_LINE 16
	#define BYTE_SEGMENTS = 4
	
	     // Check the input parameters
	     if ((buffer != NULL) &&
	         (length != 0)) {
	
	          int count;
	
	          // Iterate through the entire receive buffer
	          for (count = 0; count < length; count++) {
	
	               // Add a line number
	               if (count % BYTES_PER_LINE == 0)
	                    printf("\n0%d: ", (int)(count / BYTES_PER_LINE));
	
	               // Add a space between every the segments
	               if (count % BYTE_SEGMENTS == 0) {
	                    printf(" %02x",buffer[count]);
	
	               } else {
	                    printf("%02x",buffer[count]);
	               }
	          }
	
	          // Add a newline at the end
	          printf("\n");
	          return ${4};
	     }
	
	     return ${5:error};
	}
###########################################################################
# File Sections
###########################################################################
# File includes
snippet finc
	//////////////////////////////////////////////////////////////////////
	/// @name Includes
	//@{
	
	${1}
	
	//@} End of Includes
# File Defines
snippet fdef
	//////////////////////////////////////////////////////////////////////
	/// @name Defines
	//@{
	
	${1}
	
	//@} End of Defines
# File Typedefs
snippet ftype
	//////////////////////////////////////////////////////////////////////
	/// @name Typedefs
	//@{
	
	${1}
	
	//@} End of Typedefs
# File Types
snippet ftypes
	//////////////////////////////////////////////////////////////////////
	/// @name Types
	//@{
	
	${1}
	
	//@} End of Types
# File Classes
snippet fclasses
	//////////////////////////////////////////////////////////////////////
	/// @name Classes
	//@{
	
	${1}
	
	//@} End of Classes
# File Data
snippet fdata
	//////////////////////////////////////////////////////////////////////
	/// @name Data
	//@{
	
	${1}
	
	//@} End of Data
# File Private Methods
snippet fprivate
	//////////////////////////////////////////////////////////////////////
	/// @name Private Methods
	//@{
	
	${1}
	
	//@} End of Private Methods
# File Public Methods
snippet fpublic
	//////////////////////////////////////////////////////////////////////
	/// @name Methods
	//@{
	
	${1}
	
	//@} End of Methods
###########################################################################
# Keywords
###########################################################################
snippet bug
	 /* :BUG: `strftime("%c")`:`g:snips_email`: ${1} */
snippet compiler
	 /* :COMPILER:`strftime("%c")`:`g:snips_email`: ${1} */
snippet todo
	 /* :TODO: `strftime("%c")`:`g:snips_email`: ${1} */
snippet tricky
	 /* :TRICKY: `strftime("%c")`:`g:snips_email`: ${1} */
snippet warning
	 /* :WARNING: `strftime("%c")`:`g:snips_email`: ${1} */
snippet workaround
	 /* :WORKAROUND: `strftime("%c")`:`g:snips_email`: ${1} */
snippet keyword
	 /* :${1}: `strftime("%c")`:`g:snips_email`: ${2} */
###########################################################################
# Special
###########################################################################
snippet empty
	/* EMPTY */
snippet fall-through
	/* FALL THROUGH */
snippet not-reached
	/* NOT REACHED */
###########################################################################
# Files
###########################################################################
snippet fh
	/**
	 * @file `Filename()`
	 *
	 * @brief ${1}
	 *
	 * ${1}
	 *
	 * @ingroup ${2}
	 *
	 * @owner  `g:snips_author` (`g:snips_email`)
	 * @author `g:snips_author` (`g:snips_email`)
	 */
snippet hfh
	/**
	 * @file `Filename()`
	 *
	 * @brief ${1}
	 *
	 * ${1}
	 *
	 * @ingroup ${2}
	 *
	 * @owner  `g:snips_author` (`g:snips_email`)
	 * @author `g:snips_author` (`g:snips_email`)
	 */
	#ifndef INCLUSION_GUARD_`toupper(Filename())`_H
	#define INCLUSION_GUARD_`toupper(Filename())`_H
	
	#ifdef __cplusplus
	extern "C" {
	#endif
	
	/**
	 * Add code <HERE>
	 */
	
	#ifdef __cplusplus
	}
	#endif
	
	#endif // INCLUSION_GUARD_`toupper(Filename())`_H
